// Объекты в JS \\

// В JS есть специальные структуры данных - объекты.
// Объекты создаются с помощью фигурных скобок {}, внутри которых пишутся элементы в форме: ключ: значение.
let obj = {};
obj = {1: 'a', 2: 'b', 3: 'c'};
console.log(obj[1]); // выведет 'a'
/*
Задача 1:

Создайте объект с ключами от 1 до 7, в качестве значений содержащий имена дней недели.
Выведите на экран все его элементы.
*/
obj = {1: 'Понедельник', 2: 'Вторник', 3: 'Среда', 4: 'Четверг', 5: 'Пятница', 6: 'Суббота', 7: 'Воскресенье'};
console.log(obj[1], obj[2], obj[3], obj[4], obj[5], obj[6], obj[7]);
// Чтобы посмотреть содержимое всего объекта, нужно вывести его в консоль.
// Ключами объектов могут быть строки.
obj = {'a': 1, 'b': 2, 'c': 3};
console.log(obj['a']); // выведет 1
/*
Задача 2:

Создайте объект user с ключами 'name', 'surname', 'patronymic' и какими-то произвольными значениями.
Выведите на экран фамилию, имя и отчество через пробел.
*/
let user = {'name': 'Jim', 'surname': 'Hockins', 'patronymic': 'Evilson'};
console.log(user['name'] + ' ' + user['surname'] + ' ' + user['patronymic']);

// Свойства объектов \\

/*
Существует альтернативный способ обращения к элементам объекта.
В этом способе мы после имени объекта ставим точку и пишем имя ключа.
В этом случае ключ называется свойством объекта.
*/
obj = {a: 1, b: 2, c: 3};
console.log(obj.a); // выведет 1
/*
Задача 3:

Создайте объект date с ключами 'year', 'month' и 'day' и значениями, соответствующими текущему дню.
Выведите созданную дату на экран в формате год-месяц-день. 
*/
let date = {year: 2001, month: 21, day: 10};
console.log(date.year + '-' + date.month + '-' + date.day);


// Ограничения на ключи объектов в JS \\

/*
Мы можем писать без кавычек не все ключи объектов, а только те, которые удовлетворяют следующим ограничениям:
они не могут начинаться с цифры и не могут содержать внутри себя дефис, пробел и тому подобные вещи. 
*/
// Если строка нарушает ограничение, то её нужно брать в кавычки.
obj = {'1key': 'a', 'key-2': 'b', key3: 'c'};
// К таким ключам можно обращаться только через квадратные скобки.
console.log(obj['1key']);
console.log(obj['key-2']);
/*
Задача 4:

Исправьте ошибки, допущенные в следующем коде:
  let obj = {
  	'1a': 1,
  	'b2': 2,
  	'с-с': 3,
  	'd 4': 4,
  	'e5': 5
  };

  console.log(obj.1a);
  console.log(obj.b2);
  console.log(obj.c-c);
  console.log(obj.d 4);
  console.log(obj.e5);
*/
obj = {
	'1a': 1,
	'b2': 2,
	'с-с': 3,
	'd 4': 4,
	'e5': 5
};

console.log(obj['1a']);
console.log(obj.b2);
console.log(obj['с-с']);
console.log(obj['d 4']);
console.log(obj.e5);
// Элементы объектов можно изменять, обращаясь к ним по ключам.
obj = {a: 1, b: 2, c: 3};
obj.a = '!';
console.log(obj);
/*
Задача 5:

Дан объект:
  let obj = {x: 1, y: 2, z: 3};

Возведите в квадрат каждый элемент этого объекта. 
*/
obj = {x: 1, y: 2, z: 3};
obj.x = obj.x**2;
obj.y = obj.y**2;
obj.z = obj.z**2;
console.log(obj);
/*
Задача 6:

Создайте пустой объект, а затем заполните его значениями. 
*/
obj = {};
obj.a = 1;
obj.b = 2;
obj.c = 3;
console.log(obj);
/*
Как вы уже знаете, в массивах элементы располагаются в строгом порядке, ведь позиция каждого
элемента определяет его ключ.
В объектах же мы сами назначаем ключи, поэтому порядок следования элементов не имеет значения.
То есть массивы являются упорядоченными списками, а объекты - нет. 
*/
obj = {7: 'a', 50: 'b', 23: 'c'}; // Объект корректный

// Массив ключей объекта в JS \\

// Можно получит ьмассив ключей объекта - Object.keys()
obj = {a: 1, b: 2, c: 3};
let keys = Object.keys(obj);
console.log(keys);
/*
Задача 7:

Получите массив ключей следующего объекта:
  let obj = {x: 1, y: 2, z: 3};
*/
obj = {x: 1, y: 2, z: 3};
keys = Object.keys(obj);
console.log(keys);

// Длина объекта в JS \\

// У объектов нет свойства length.
// Решить данную задачу можно обходным путем = получим массив ключей объекта и найдем его длину.
console.log(Object.keys(obj).length);
/*
Задача 8:

Найдите количество элементов в следующем объекте:
  let obj = {x: 1, y: 2, z: 3};
*/
obj = {x: 1, y: 2, z: 3};
console.log(Object.keys(obj).length);
// Ключи объектов могут хранитьься в переменных.
/*
Задача 9:

 Дан следующий объект:
let obj = {x: 1, y: 2, z: 3};

Дана переменная key, в которой хранится один из ключей нашего объекта.
Выведите с помощью этой переменной соответствующий элемент объекта. 
*/
obj = {x: 1, y: 2, z: 3, 'key': 4};
let key = 'x';
console.log(obj[key]);

// В следующем коды мы из объекта получаем элемент с ключом 'key'
console.log(obj['key']);
// А в следующем коде мы из объекта получаем элемент с ключом, имя которого хранится в переменной key
console.log(obj[key]);
/*
Задача 10:

Исправьте ошибку, допущенную в следующем коде:
  let obj = {x: 1, y: 2, z: 3};
  console.log(obj[x]);
*/
console.log(obj['x']);
/*
Задача 11:

Исправьте ошибку, допущенную в следующем коде:
  let obj = {x: 1, y: 2, z: 3};
  let key = 'x';
  console.log(obj['key']);
*/
console.log(obj[key]);

// Вычисляемые свойства в JS \\

// При объявлении объекта имена его свойств могут браться из переменных. Такие свойства называются вычелсяемыми.
obj = {
  a: 1,
  b: 2,
  c: 3
};
key = 'a';
obj = {
  [key]: 1,
  b: 2,
  c: 3
};
// При объявлении вычисляемых свойств можно выполнять некоторый код.
obj = {
  [key + '1']: 1,
  [key + '2']: 2,
  [key + '3']: 3
};


// Оператор в JS \\

// С помощью оператора in можно проверять наличие свойства в объекте.
obj = {a: 1, b: 2, c: 3};
console.log('b' in obj); // выведет true
console.log('x' in obj); // выведет false

// Оператор delete в JS \\

// Можно удалять эементы объектов с помощью оператора delete.
obj = {a: 1, b: 2, c: 3};
delete obj.b;
console.log(obj); // выведет {a: 1, c: 3}
// Объекты имеют свой тип данных, который называется 'object'.
console.log(typeof {});
// Массивы на самом деле являются частным случаем объектов.
console.log(typeof []);
/*
Как было указано выше, оператор typeof не позволяет различать массивы и объекты.
Иногда, однако, это необходимо сделать.
На помощь придет функция Array.isArray()
*/
console.log(Array.isArray([])); // true
console.log(Array.isArray({})); // false

// Объекты и примитивы в JS \\

/*
Объекты (в том числе и массивы, как мы уже знаем) считаются сложными типами данных. 
Строки, числа, логические значения считаются простыми, или примитивными типами данных.
Их часто так и называют - примитивы, подразумевая все то, что не является объектом.
*/
/*
В JavaScript семь примитивных типов данных: string, number, boolean, null, undefined, symbol, bigint.
Запомните их количество и названия - это часто спрашивают на собеседованиях. 
*/

// Передача объектов по ссылке в JS \\

/*
Массивы и объекты несколько отличаются от остальных примитивных типов данных.
Отличие в том, что переменная, хранящая массив, на самом деле не содержит его, а просто ссылается на него.

На практике это означает, что при записи объекта в другую переменную,
обе переменных будут ссылаться на один и тот же объект.
*/
let obj1 = {a: 1, b: 2, c: 3};
let obj2 = obj1;
obj2.a = '!';
// В реззультате изменения будут видны и в другой переменной.
console.log(obj1); // {a: '!', b: 2, c: 3}
// Константы, содержащие массивы и объекты, работают интересным образом.
// JavaScript не разрешает изменять значения этих констант, но изменять свойства объектов и значения элементов массивов - можно. 
const objConst = {a: 1, b: 2, c: 3};
// objConst = 123; // ошибка
// objConst = {x: 1, y: 2, z: 3}; // error
objConst.a = '+'; // работает!
console.log(objConst);

// Практика на поиск ошибок \\

/*
Задача 12:

Код должен вывести элемент объекта:
  let obj = {x: 1, y: 2, z: 3};
  console.log(obj[x]);
*/
obj = {x: 1, y: 2, z: 3};
console.log(obj.x); // или console.log(obj['x']);
/*
Задача 13:

Код должен вывести элемент объекта по ключу из переменной:
  let obj = {x: 1, y: 2, z: 3};
  let key = 'x';
  
  console.log(obj.key);
*/
obj = {x: 1, y: 2, z: 3};
key = 'x';
console.log(obj[key]);
/*
Задача 14:

Код должен вывести сумму элементов объекта:
  let obj = {x: 1, y: 2, z: 3};
  let sum = obj[x] + obj[y] + obj[x];
  
  console.log(obj);
*/
obj = {x: 1, y: 2, z: 3};
let sum = obj.x + obj.y + obj.z;
console.log(sum);
/*
Задача 15:

Код должен вывести количество элементов объекта:
  let obj = {x: 1, y: 2, z: 3};
  console.log(obj.length);
*/
obj = {x: 1, y: 2, z: 3};
console.log(Object.keys(obj).length);